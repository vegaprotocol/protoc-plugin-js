import join from '../../../utils/join.js'
import { union, quote } from '../../../utils/d-ts.js'

export default function ({ name, values }) {
  const eV = values.map(v => v.value)
  const eN = values.map(v => v.name)

  return join`
    /// autogenerated by protoc-plugin-js
    import type { LiteralUnion } from 'type-fest'

    ${values.map(v => `export const ${v.name} = ${v.value}`)}

    export type Values = ${union(eV)}
    export type Names = ${union(eN.map(quote))}

    export const enum ${name} {
      ${values.map(v => `${v.name} = ${v.value}`).join(',')}
    }

    declare const enumValues: Map<Names, Values>
    declare const enumNames: Map<Values, Names>

    export function encode(value: Values | Names, buf: Uint8Array, byteOffset: number): Uint8Array

    export function decode(varint: bigint): LiteralUnion<Names, number>

    export function encodingLength (value: LiteralUnion<Values, number>): number

    export function stringify(int: Values): LiteralUnion<Names, undefined>

    export function parse(str: Names): LiteralUnion<Values, undefined>
  `
}
